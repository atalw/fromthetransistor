$date
	Wed Jun 15 19:57:42 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 32 ! out_Y [31:0] $end
$var wire 4 " out_CNZV [3:0] $end
$var reg 1 # in_Barrel_carry $end
$var reg 4 $ in_CNZV [3:0] $end
$var reg 32 % in_Op2 [31:0] $end
$var reg 4 & in_Opcode [3:0] $end
$var reg 32 ' in_Rn [31:0] $end
$var reg 1 ( in_Set_cond $end
$scope module a $end
$var wire 1 # in_Barrel_carry $end
$var wire 4 ) in_CNZV [3:0] $end
$var wire 32 * in_Op2 [31:0] $end
$var wire 4 + in_Opcode [3:0] $end
$var wire 32 , in_Rn [31:0] $end
$var wire 1 ( in_Set_cond $end
$var wire 4 - out_CNZV [3:0] $end
$var wire 32 . out_Y [31:0] $end
$var wire 32 / ad_Y [31:0] $end
$var wire 4 0 ad_CNZV [3:0] $end
$var reg 1 1 ad_Carry $end
$var reg 32 2 ad_Op2 [31:0] $end
$var reg 32 3 ad_Rn [31:0] $end
$var reg 4 4 r_CNZV [3:0] $end
$var reg 32 5 r_Y [31:0] $end
$scope module adder $end
$var wire 1 1 in_Carry $end
$var wire 32 6 in_Op2 [31:0] $end
$var wire 32 7 in_Rn [31:0] $end
$var wire 4 8 out_CNZV [3:0] $end
$var wire 32 9 out_Y [31:0] $end
$var reg 4 : r_CNZV [3:0] $end
$var reg 32 ; r_Y [31:0] $end
$var integer 32 < idx [31:0] $end
$scope function one_bit_add $end
$var reg 1 = a $end
$var reg 1 > b $end
$var reg 1 ? carry $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x?
x>
x=
b0 <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
x(
bx '
bx &
bx %
bx $
x#
bx "
bx !
$end
#100
b100000 <
b10 /
b10 9
b10 ;
0=
0>
0?
b0 0
b0 8
b0 :
b0 "
b0 -
b0 4
b10 !
b10 .
b10 5
01
b1 2
b1 6
b1 3
b1 7
b100 &
b100 +
1(
b0 $
b0 )
0#
b1 %
b1 *
b1 '
b1 ,
#200
0?
b0 "
b0 -
b0 4
b0 0
b0 8
b0 :
0=
b101 /
b101 9
b101 ;
0>
b100000 <
b101 !
b101 .
b101 5
b11 2
b11 6
b10 3
b10 7
b11 %
b11 *
b10 '
b10 ,
#300
