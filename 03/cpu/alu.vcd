$date
	Thu Jun 16 18:38:41 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 32 ! out_Y [31:0] $end
$var wire 1 " out_Writeback $end
$var wire 4 # out_CNZV [3:0] $end
$var reg 1 $ in_Barrel_carry $end
$var reg 4 % in_CNZV [3:0] $end
$var reg 32 & in_Op2 [31:0] $end
$var reg 4 ' in_Opcode [3:0] $end
$var reg 32 ( in_Rn [31:0] $end
$var reg 1 ) in_Set_cond $end
$scope module a $end
$var wire 1 $ in_Barrel_carry $end
$var wire 4 * in_CNZV [3:0] $end
$var wire 32 + in_Op2 [31:0] $end
$var wire 4 , in_Opcode [3:0] $end
$var wire 32 - in_Rn [31:0] $end
$var wire 1 ) in_Set_cond $end
$var wire 4 . out_CNZV [3:0] $end
$var wire 1 " out_Writeback $end
$var wire 32 / out_Y [31:0] $end
$var wire 32 0 ad_Y [31:0] $end
$var wire 4 1 ad_CNZV [3:0] $end
$var reg 1 2 ad_Carry $end
$var reg 32 3 ad_Op2 [31:0] $end
$var reg 32 4 ad_Rn [31:0] $end
$var reg 4 5 r_CNZV [3:0] $end
$var reg 1 6 r_Writeback $end
$var reg 32 7 r_Y [31:0] $end
$scope module adder $end
$var wire 1 2 in_Carry $end
$var wire 32 8 in_Op2 [31:0] $end
$var wire 32 9 in_Rn [31:0] $end
$var wire 4 : out_CNZV [3:0] $end
$var wire 32 ; out_Y [31:0] $end
$var reg 4 < r_CNZV [3:0] $end
$var reg 32 = r_Y [31:0] $end
$var integer 32 > idx [31:0] $end
$scope function one_bit_add $end
$var reg 1 ? a $end
$var reg 1 @ b $end
$var reg 1 A carry $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xA
x@
x?
b0 >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
x6
bx 5
bx 4
bx 3
x2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
bx %
x$
bx #
x"
bx !
$end
#100
b100000 >
b10 0
b10 ;
b10 =
0?
0@
0A
b0 1
b0 :
b0 <
1"
16
b0 #
b0 .
b0 5
b10 !
b10 /
b10 7
02
b1 3
b1 8
b1 4
b1 9
b100 '
b100 ,
1)
b0 %
b0 *
0$
b1 &
b1 +
b1 (
b1 -
#200
0A
b0 #
b0 .
b0 5
b0 1
b0 :
b0 <
0?
b101 0
b101 ;
b101 =
0@
b100000 >
b101 !
b101 /
b101 7
b11 3
b11 8
b10 4
b10 9
b11 &
b11 +
b10 (
b10 -
#300
