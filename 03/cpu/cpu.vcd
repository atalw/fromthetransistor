$date
	Sun Jun 12 13:17:54 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 32 ! out_Y [31:0] $end
$var wire 4 " out_CNZV [3:0] $end
$var reg 1 # in_Carry $end
$var reg 32 $ in_Op2 [31:0] $end
$var reg 4 % in_Opcode [3:0] $end
$var reg 32 & in_Rn [31:0] $end
$scope module a $end
$var wire 1 # in_Carry $end
$var wire 32 ' in_Op2 [31:0] $end
$var wire 4 ( in_Opcode [3:0] $end
$var wire 32 ) in_Rn [31:0] $end
$var wire 4 * out_CNZV [3:0] $end
$var wire 32 + out_Y [31:0] $end
$var wire 32 , ad_Y [31:0] $end
$var wire 4 - ad_CNZV [3:0] $end
$var reg 1 . ad_Carry $end
$var reg 32 / ad_Op2 [31:0] $end
$var reg 32 0 ad_Rn [31:0] $end
$var reg 4 1 r_CNZV [3:0] $end
$var reg 32 2 r_Y [31:0] $end
$scope module adder $end
$var wire 1 . in_Carry $end
$var wire 32 3 in_Op2 [31:0] $end
$var wire 32 4 in_Rn [31:0] $end
$var wire 4 5 out_CNZV [3:0] $end
$var wire 32 6 out_Y [31:0] $end
$var reg 4 7 r_CNZV [3:0] $end
$var reg 32 8 r_Y [31:0] $end
$var integer 32 9 idx [31:0] $end
$scope function one_bit_add $end
$var reg 1 : a $end
$var reg 1 ; b $end
$var reg 1 < carry $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x<
x;
x:
b0 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
x.
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
x#
bx "
bx !
$end
#100
b100000 9
0:
0;
0<
b0 -
b0 5
b0 7
b10 ,
b10 6
b10 8
b0 "
b0 *
b0 1
b10 !
b10 +
b10 2
0.
b1 /
b1 3
b1 0
b1 4
b100 %
b100 (
0#
b1 $
b1 '
b1 &
b1 )
#200
0<
b0 "
b0 *
b0 1
b0 -
b0 5
b0 7
0:
0;
b100000 9
b101 ,
b101 6
b101 8
b101 !
b101 +
b101 2
b11 /
b11 3
b10 0
b10 4
b11 $
b11 '
b10 &
b10 )
#300
